### OpenSSL keys & certificates tricks


#### SERVER KEYS ####

# generate a private key using 'genpkey' (2048 bits default if not specified)
openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits -outform PEM -out ./privatekey.pem
openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -outform PEM -out ./privatekey.pem
openssl genrsa -out privatekey.pem
openssl genrsa -out privatekey.pem 2048

# generate public key
openssl pkey -pubout -in privatekey.pem -out publickey.pem
openssl rsa -pubout -in privatekey.pem -out publickey.pem

# public key should start with -----BEGIN RSA PUBLIC KEY-----
# private key with  -----BEGIN PRIVATE KEY-----
# is the private key correct?
openssl rsa -check -in privatekey.pem

# does a public key belong to a private key?
openssl rsa -modulus -noout -in publickey.pem
openssl rsa -modulus -noout -in privatekey.pem

# ...you can check MD5 hash instead of modulus
openssl rsa -modulus -noout -in publickey.pem | openssl md5
openssl rsa -modulus -noout -in privatekey.pem | openssl md5

# generate dh parameters
openssl dhparam -out dhparam.pem 2048


#### CREATE A SELF-SIGNED SERVER CERTIFICATE ####

# in a nutshell, a certificate is a wrapper with the server public key, server domain information and additional metadata

# generate a self-signed certificate - the simplest, but doesn't work in all scenarios (-x509 = self-sign)
openssl req \
    -newkey rsa:2048 -nodes -keyout domain.key \
    -x509 -days 3650 -out domain.crt

# ... existing private key
openssl req \
    -key domain.key \
    -new \
    -x509 -days 3650 -out domain.crt

# ... from existing private key and CSR
openssl x509 \
    -signkey domain.key \
    -in domain.csr \
    -req -days 3650 -out domain.crt


#### CERTIFICATE SIGNED BY A CA ####

# some applications needs your certificate to be signed by a CA
# in this case, you have to issue a request to a CA
# to issue a request, you have to generate a CSR (certificate signature request)
# and send the CSR to the CA, if it approves the request will sign it with his private key
# finally, the CA will issue a certificate signed and verified for public use for that domain

# generate CSR from a private key (suggest at least to specify domain or hostname in FQDN)
openssl req \
    -key domain.pem \
    -new -out domain.csr

# generate a CSR from an existing Certificate and private key
openssl x509 \
    -in domain.crt \
    -signkey domain.key \
    -x509toreq -out domain.csr


#### CREATE LOCAL CA AND SIGN CERTIFICATES ####

# you can create a CA for yourself and sign certificates
# in this case, you have to copy your self generated CA public certificate to all nodes

# create self CA certificate and private key
openssl req -nodes -new -x509 -days 36500 -keyout ca.key -out ca.crt
openssl req -new -x509 -days 36500 -extensions v3_ca -keyout ca.key -out ca.crt

# sign a CSR using your CA self certificate and private key
openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days <duration>

#### VIEW CERTIFICATES ####

# CSR entries
openssl req -text -noout -verify -in domain.csr
# Cert entries
openssl x509 -text -noout -in domain.crt
# Verify a certificate signed by CA
openssl verify -verbose -CAFile ca.crt domain.crt

#### CHECK CERTIFICATE WITH OPENSSL ###

openssl s_client -connect <address>:<port>

## sources and additional info:
https://www.openssl.org/docs/manmaster/man1/openssl.html
https://rietta.com/blog/openssl-generating-rsa-key-from-command/
https://gist.github.com/Hakky54/b30418b25215ad7d18f978bc0b448d81
https://gist.github.com/p3t3r67x0/5313b0d7abc25e06c2d78f8b767d4bc3
https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs
https://mosquitto.org/man/mosquitto-tls-7.html
