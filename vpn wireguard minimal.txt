## this is a very quick tutorial about building a minimalist vpn with a resource constraint linux machine or vm ##

# TECHNICAL NOTES:
as Wireguard implements a P2P oriented vpn, it may not be technically correct to talk about server and client entities
but some scenarios have one or few reachable peers with static IPs/DDNS and a bunch of road warriors with dynamic IPs behind one or multiple NATs
hereby we will name "server" a primary peer which is reachable and "client" as an entity behind NAT, not directly reachable by other peers

# minimum requirements:
1 vCore, 128 MB ram, 1 GB disk space
# with 1 tunnel and <5 clients connected, resources in use are
<1% cpu, <85 MB disk space, <85 MB ram

# system specs:
alpine linux 3.18 virtual - https://www.alpinelinux.org/downloads/
kernel  6.1.41-0-virt

# packages needed:
wireguard-tools
iptables

# SERVER / PRIMARY PEER

# generate node keys and set chmod 600
wg genkey > privatekey
wg pubkey < privatekey > publickey

# setup the network interface for the wg tunnel
in /etc/network/interfaces:
iface wg0 inet static
        address 172.16.0.1
        netmask 255.255.255.0
        pre-up wg-quick up /etc/wireguard/wg0.conf
        post-up ip route add 172.16.0.1/24 dev wg0
        post-down ip link delete wg0


# setup wireguard normally
in /etc/wireguard/wg0.conf:
[Interface]
ListenPort = ...
PrivateKey = ...

[Peer]
PublicKey = ...
AllowedIPs = 172.16.0.11/32

[Peer]
PublicKey = zzzzzz
AllowedIPs = 172.16.0.12/32
  
...

# wireguard debug on dmesg (removes at every reboot)
echo module wireguard +p > /sys/kernel/debug/dynamic_debug/control


## OPTIONAL: shall wg0 node forward traffic?
# this will make this peer act as a router for a star-like topology with road warriors

# enable forwarding, 'sysctl -p' or reboot to apply
in /etc/sysctl.conf
net.ipv4.ip_forward=1

# add pre/post commands to wg0 tunnel to forward traffic between wg0 and another network interface
# assuming:
# $dst_zone as the destination interface, can be ethX, enoX.. or wg0 itself
# $dst_zone_class an ip class belonging to $dst_zone

in /etc/wireguard/wg0.conf:
[Interface]
...
#in case of static IPs, SNAT is faster than MASQUERADE (refer to netfilter documentation)
PreUp = iptables -t nat -A POSTROUTING -s 172.16.0.0/24 -d $dst_zone_class -o $dst_zone -j SNAT --to-source 172.16.0.1
#following rows are needed if you have a DROP default policy of FORWARD chain
#allow routing from vpn to another zone (usually a lan zone) + allow reverse traffic if connection is already established
PreUp = iptables -A FORWARD -i wg0 -o $dst_zone -j ACCEPT
PreUp = iptables -A FORWARD -i $dst_zone -o wg0 -m state --state RELATED,ESTABLISHED -j ACCEPT
#OPTIONAL: allow routing inside vpn zone
PreUp = iptables -A FORWARD -i wg0 -o wg0 -j ACCEPT

# quick hardening:
put a more restricting FORWARD and POSTROUTING criteria
put DROP policy as INPUT and restricting ingress traffic on wg interface

# CLIENT SIDE

[Interface]
PrivateKey = .....
ListenPort = .....

[Peer1]
PublicKey = peer1pubkey
Endpoint = peer1host:port
#AllowedIPs may vary depending on your configuration, here some examples:
AllowedIPs = 172.16.0.0/24, 192.168.90.0/24   <--- reaches entire vpn network and a internal zone, need the destination peer to act as a router
AllowedIPs = 172.16.0.101/32  <--- reaches a single peer
DNS = 192.168.90.1 <--- OPTIONAL: if you want to use a DNS resolver inside your VPN

[Peer2]
......
